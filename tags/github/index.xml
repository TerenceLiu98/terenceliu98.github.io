<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>github | ÁâπÂÄ´ËòáÁöÑÊó•ËàáÂ§ú</title>
    <link>https://blog.cklau.cc/tags/github/</link>
      <atom:link href="https://blog.cklau.cc/tags/github/index.xml" rel="self" type="application/rss+xml" />
    <description>github</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en</language><lastBuildDate>Sat, 17 Jun 2023 00:11:21 +0800</lastBuildDate>
    <item>
      <title>üßëüèø‚Äçüíª Homelab: A self-hosted GitHub Accelerator</title>
      <link>https://blog.cklau.cc/post/my-homelab-extra-1/</link>
      <pubDate>Sat, 17 Jun 2023 00:11:21 +0800</pubDate>
      <guid>https://blog.cklau.cc/post/my-homelab-extra-1/</guid>
      <description>&lt;p&gt;In general, there are multiple ways for you to accelerate the &lt;code&gt;git pull / git push&lt;/code&gt; or download the release/source code from &lt;a href=&#34;https://github.com&#34;&gt;GitHub&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You may directly use a HTTP/HTTPS/SOCK5 proxy in your terminal &lt;code&gt;export https_proxy=https://[ip]:[port] http_proxy=http://[ip]:[port]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You may use a public &lt;code&gt;github-proxy&lt;/code&gt;, e.g. &lt;a href=&#34;https://ghproxy.com&#34;&gt;ghproxy.com&lt;/a&gt; or &lt;a href=&#34;https://gh-proxy.com&#34;&gt;gh-proxy.com&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can also build a self-hosted &lt;code&gt;ghproxy&lt;/code&gt;-liked web service to avoid data leakage (if there is). With docker, you can set up the service in one or two minutes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;gh-proxy&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;stilleshan/gh-proxy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;container_name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;gh-proxy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;12345&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;restart&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;always&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With &lt;code&gt;nginx&lt;/code&gt; you can proxy the service to a sub-domain:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Upstream where your authentik server is hosted.
upstream ghproxy {
    server 127.0.0.1:12345;
    # Improve performance by keeping some connections alive.
    keepalive 10;
}

# Upgrade WebSocket if requested, otherwise use keepalive
map $http_upgrade $connection_upgrade_keepalive {
    default upgrade;
    &amp;#39;&amp;#39;      &amp;#39;&amp;#39;;
}

server {
    # HTTP server config
    listen 80;
    server_name ghproxy.example.com;

    # 301 redirect to HTTPS
    location / {
            return 301 https://$host$request_uri;
    }
}

server {
    # HTTPS server config
    listen 443 ssl http2;
    server_name ghproxy.example.com;

    # TLS certificates
    ssl_certificate /var/www/ssl/example.com.crt;
    ssl_certificate_key /var/www/ssl/example.com.key;

    # Proxy site
    location / {
        proxy_pass http://ghproxy;
        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade_keepalive;
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>